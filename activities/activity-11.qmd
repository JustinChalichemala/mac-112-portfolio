---
title: Activity 11
---

```{r}
library(tidyverse)
```
```{r}
students_1 <- data.frame(
  student = c("A", "B", "C"),
  class = c("STAT 101", "GEOL 101", "ANTH 101")
)

# Check it out
students_1
```



```{r}
enrollments_1 <- data.frame(
  class = c("STAT 101", "ART 101", "GEOL 101"),
  enrollment = c(18, 17, 24)
)

# Check it out
enrollments_1
```



# Exercise 1
```{r}
students_2 <- data.frame(
  student = c("D", "E", "F"),
  class = c("COMP 101", "BIOL 101", "POLI 101")
)

# Check it out
students_2
```

```{r}
enrollments_2 <- data.frame(
  course = c("ART 101", "BIOL 101", "COMP 101"),
  enrollment = c(18, 20, 19)
)

# Check it out
enrollments_2
```


```{r}
students_2 |> 
  left_join(enrollments_2, by = c("class" = "course"))

# The order of the keys is important:
# by = c("left data key" = "right data key")
# The order is mixed up here, thus we get an error:
# students_2 |> 
#   left_join(enrollments_2, by = c("course" = "class"))
```

```{r}
# Add student grades in each course
students_3 <- data.frame(
  student = c("Y", "Y", "Z", "Z"),
  class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
  grade = c("B", "S", "C", "A")
)

# Check it out
students_3
```
```{r}
# Add average grades in each course
enrollments_3 <- data.frame(
  class = c("ART 101", "BIOL 101","COMP 101"),
  grade = c("B", "A", "A-"),
  enrollment = c(20, 18, 19)
)

# Check it out
enrollments_3
```
```{r}
students_3 |> 
  left_join(enrollments_3)
```
```{r}
students_3 |> 
  left_join(enrollments_3, by = c("class" = "class"))
```

# Exercise 2

```{r}
# People who have voted
voters <- data.frame(
  id = c("A", "D", "E", "F", "G"),
  times_voted = c(2, 4, 17, 6, 20)
)

voters
```

```{r}
# Contact info for voting age adults
contact <- data.frame(
  name = c("A", "B", "C", "D"),
  address = c("summit", "grand", "snelling", "fairview"),
  age = c(24, 89, 43, 38)
)

contact
```

```{r}
# 1. We want contact info for people who HAVEN'T voted
contact |>
  anti_join(voters, by = c("name" = "id"))

# 2. We want contact info for people who HAVE voted
contact |>
  semi_join(voters, by = c("name" = "id"))


# 3. We want any data available on each person
contact |>
  full_join(voters, by = c("name" = "id"))

# 4. When possible, we want to add contact info to the voting roster

voters |> 
  full_join(contact, by = c("id" = "name"))
```
# Exercise 3
```{r}
#| echo: false

# Get rid of some duplicate rows!
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |> 
  distinct(sid, sessionID, .keep_all = TRUE)
head(grades)
```
```{r}
#| echo: false

courses <- read.csv("https://mac-stat.github.io/data/courses.csv")
head(courses)
```

```{r}
# How many observations (rows) and variables (columns) are there in the grades data?
dim(grades)

# How many observations (rows) and variables (columns) are there in the courses data?
dim(grades)
```
# Exercises 4
```{r}
courses |> 
  count(sessionID) |> 
  filter(n > 1)
```
```{r}
courses |> 
  filter(sessionID == "session2047")
```



